# This pyproject.toml file contains a best-effort configuration to uphold the
# best-practices and style described in the Google Python style guide:
#   https://google.github.io/styleguide/pyguide.html
#
# Its canonical open-source location is:
#   https://google.github.io/styleguide/pylintrc

[tool.poetry]
name = "aineko"
version = "0.4.1"
description = "Aineko, a data integration framework."
authors = ["Convex Labs <engineering-admins@convexlabs.xyz>"]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://aineko.dev"
repository = "https://github.com/aineko-dev/aineko"
documentation = "https://docs.aineko.dev"
classifiers = [
  "Development Status :: 4 - Beta",
  "Natural Language :: English",
  "Typing :: Typed",
]

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
pydantic = ">=2.5"
PyYAML = "^6.0.1"
confluent-kafka = "~2.2.0"
ray = { extras = ["default"], version = "^2.9.0" }
cookiecutter = "^2.4.0"
click = "^8.1.7"
pygithub = "~=2.1.1"


[tool.poetry.group.dev.dependencies]
aineko_style = "^0.0.2"
pylint = "^2.17.5"
black = "^23.7.0"
yamllint = "^1.32.0"
pre-commit = "^3.4.0"
isort = "^5.12.0"
pydocstyle = "^6.3.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs-material = "9.5.2"
mkdocs-glightbox = "^0.3.4"
mkdocstrings = { extras = ["python"], version = "^0.23.0" }
mkdocs-click = "^0.8.1"
mike = "^2.0.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
mypy = "^1.5.1"
pytest = "^7.4.1"
pytest-cov = "^4.1.0"
pytest-subtests = "^0.11.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
filterwarnings = [
  # Ignore this depracation warning because of the way virtualenvs is implemented
  "ignore:.*pkg_resources.*:DeprecationWarning",
]
pythonpath = ["."]
markers = [
  "integration: marks tests as requiring docker (deselect with '-m \"not integration\"'",
]

[tool.poetry.scripts]
aineko = "aineko.__main__:cli"

[tool.pylint.main]
# Analyse import fallback blocks. This can be used to support both Python 2 and 3
# compatible code, which means that the block might have code that exists only in
# one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks = false

# Files or directories to be skipped. They should be base names, not paths.
ignore = ["third_party", "CVS", "tests"]

# Files or directories matching the regular expression patterns are skipped. The
# regex matches against base names, not paths. The default value ignores Emacs
# file locks
# ignore-patterns =

# List of module names for which member attributes should not be checked (useful
# for modules/projects where namespaces are manipulated during runtime and thus
# existing member attributes cannot be deduced by static analysis). It supports
# qualified module names, as well as Unix pattern matching.
# ignored-modules =

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use, and will cap the count on Windows to
# avoid hangs.
jobs = 4

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins = ["aineko_style.checker"]

# Pickle collected data for later comparisons.
persistent = false

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension = false

[tool.pylint.basic]
# Regular expression matching correct argument names. Overrides argument-naming-
# style. If left empty, argument names will be checked with the set naming style.
argument-rgx = "^[a-z][a-z0-9_]*$"

# Regular expression matching correct attribute names. Overrides attr-naming-
# style. If left empty, attribute names will be checked with the set naming
# style.
attr-rgx = "^_{0,2}[a-z][a-z0-9_]*$"

# Bad variable names which should always be refused, separated by a comma.
bad-names = []

# Regular expression matching correct class attribute names. Overrides class-
# attribute-naming-style. If left empty, class attribute names will be checked
# with the set naming style.
class-attribute-rgx = "^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$"

# Regular expression matching correct class names. Overrides class-naming-style.
# If left empty, class names will be checked with the set naming style.
class-rgx = "^_?[A-Z][a-zA-Z0-9]*$"

# Regular expression matching correct constant names. Overrides const-naming-
# style. If left empty, constant names will be checked with the set naming style.
const-rgx = "^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$"

# Minimum line length for functions/classes that require docstrings, shorter ones
# are exempt.
docstring-min-length = 10

# Regular expression matching correct function names. Overrides function-naming-
# style. If left empty, function names will be checked with the set naming style.
function-rgx = "^(?:(?P<exempt>setUp|tearDown|setUpModule|tearDownModule)|(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$"

# Good variable names which should always be accepted, separated by a comma.
good-names = ["_"]

# Include a hint for the correct naming format with invalid-name.
include-naming-hint = false

# Regular expression matching correct inline iteration names. Overrides
# inlinevar-naming-style. If left empty, inline iteration names will be checked
# with the set naming style.
inlinevar-rgx = "^[a-z][a-z0-9_]*$"

# Regular expression matching correct method names. Overrides method-naming-
# style. If left empty, method names will be checked with the set naming style.
method-rgx = "(?x)^(?:(?P<exempt>_[a-z0-9_]+__|runTest|setUp|tearDown|setUpTestCase|tearDownTestCase|setupSelf|tearDownClass|setUpClass|(test|assert)_*[A-Z0-9][a-zA-Z0-9_]*|next)|(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9_]*)|(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$"

# Regular expression matching correct module names. Overrides module-naming-
# style. If left empty, module names will be checked with the set naming style.
# __main__ added manually for our CLI implementation
module-rgx = "^(_?[a-z][a-z0-9_]*|__init__|__main__)$"

# Colon-delimited sets of names that determine each other's naming style when the
# name regexes allow several styles.
# name-group =

# Regular expression which should only match function or class names that do not
# require a docstring.
no-docstring-rgx = "(__.*__|main|test.*|.*test|.*Test)$"

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties. These
# decorators are taken in consideration only for invalid-name.
property-classes = [
  "abc.abstractproperty",
  "cached_property.cached_property",
  "cached_property.threaded_cached_property",
  "cached_property.cached_property_with_ttl",
  "cached_property.threaded_cached_property_with_ttl",
]

# Regular expression matching correct variable names. Overrides variable-naming-
# style. If left empty, variable names will be checked with the set naming style.
variable-rgx = "^[a-z][a-z0-9_]*$"

[tool.pylint.classes]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = ["__init__", "__new__", "setUp"]

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg = ["cls", "class_"]

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = [
  "builtins.StandardError",
  "builtins.Exception",
  "builtins.BaseException",
]

[tool.pylint.format]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
# expected-line-ending-format =

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = "(?x)(\n^\\s*(\\#\\ )?<?https?://\\S+>?$|\n^\\s*(from\\s+\\S+\\s+)?import\\s+.+$)"

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4

# String used as indentation unit.  The internal Google style guide mandates 2
# spaces.  Google's externaly-published style guide says 4, consistent with
# PEP 8.  Here, at Convex, we use 4 spaces.
indent-string = '    '

# Maximum number of characters on a single line.
max-line-length = 80

# Maximum number of lines in a module.
max-module-lines = 99999

# Allow the body of an if to be on the same line as the test if there is no else.
single-line-if-stmt = true

[tool.pylint.imports]
# Deprecated modules which should not be used, separated by a comma.
deprecated-modules = ["regsub", "TERMIOS", "Bastion", "rexec", "sets"]

# Output a graph (.gv or any supported image format) of external dependencies to
# the given file (report RP0402 must not be disabled).
# ext-import-graph =

# Output a graph (.gv or any supported image format) of all (i.e. internal and
# external) dependencies to the given file (report RP0402 must not be disabled).
# import-graph =

# Output a graph (.gv or any supported image format) of internal dependencies to
# the given file (report RP0402 must not be disabled).
# int-import-graph =

# Force import order to recognize a module as part of the standard compatibility
# libraries.
# known-standard-library =

# Force import order to recognize a module as part of a third party library.
known-third-party = ["enchant", "absl"]

[tool.pylint.logging]
# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules = ["logging", "absl.logging", "tensorflow.io.logging"]

[tool.pylint."messages control"]
# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
# confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]

# Disable the message, report, category or checker with the given id(s). You can
# either give multiple identifiers separated by comma (,) or put this option
# multiple times (only on the command line, not in the configuration file where
# it should appear only once). You can also use "--disable=all" to disable
# everything first and then re-enable specific checks. For example, if you want
# to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = [
  "abstract-method",
  "apply-builtin",
  "arguments-differ",
  "attribute-defined-outside-init",
  "backtick",
  "bad-option-value",
  "basestring-builtin",
  "buffer-builtin",
  "c-extension-no-member",
  "consider-using-enumerate",
  "cmp-builtin",
  "cmp-method",
  "coerce-builtin",
  "coerce-method",
  "delslice-method",
  "div-method",
  "duplicate-code",
  "eq-without-hash",
  "execfile-builtin",
  "file-builtin",
  "filter-builtin-not-iterating",
  "fixme",
  "getslice-method",
  "global-statement",
  "hex-method",
  "idiv-method",
  "implicit-str-concat",
  "import-error",
  "import-self",
  "import-star-module-level",
  "inconsistent-return-statements",
  "input-builtin",
  "intern-builtin",
  "invalid-str-codec",
  "locally-disabled",
  "long-builtin",
  "long-suffix",
  "map-builtin-not-iterating",
  "misplaced-comparison-constant",
  "missing-function-docstring",
  "metaclass-assignment",
  "next-method-called",
  "next-method-defined",
  "no-absolute-import",
  "no-else-break",
  "no-else-continue",
  "no-else-raise",
  "no-else-return",
  "no-init",                        # added
  "no-member",
  "no-name-in-module",
  "no-self-use",
  "nonzero-method",
  "oct-method",
  "old-division",
  "old-ne-operator",
  "old-octal-literal",
  "old-raise-syntax",
  "parameter-unpacking",
  "print-statement",
  "raising-string",
  "range-builtin-not-iterating",
  "raw_input-builtin",
  "rdiv-method",
  "reduce-builtin",
  "relative-import",
  "reload-builtin",
  "round-builtin",
  "setslice-method",
  "signature-differs",
  "standarderror-builtin",
  "suppressed-message",
  "sys-max-int",
  "too-few-public-methods",
  "too-many-ancestors",
  "too-many-arguments",
  "too-many-boolean-expressions",
  "too-many-branches",
  "too-many-instance-attributes",
  "too-many-locals",
  "too-many-nested-blocks",
  "too-many-public-methods",
  "too-many-return-statements",
  "too-many-statements",
  "trailing-newlines",
  "unichr-builtin",
  "unicode-builtin",
  "unnecessary-pass",
  "unpacking-in-except",
  "useless-else-on-loop",
  "useless-object-inheritance",
  "useless-suppression",
  "using-cmp-argument",
  "wrong-import-order",
  "xrange-builtin",
  "zip-builtin-not-iterating",
]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where it
# should appear only once). See also the "--disable" option for examples.
# enable =

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["TODO"]

[tool.pylint.reports]
# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each category,
# as well as 'statement' which is the total number of statements analyzed. This
# score is used by the global evaluation report (RP0004).
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details.
# msg-template =

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format = "text"

# Tells whether to display a full report or only the messages.
reports = false

[tool.pylint.similarities]
# Comments are removed from the similarity computation
ignore-comments = true

# Docstrings are removed from the similarity computation
ignore-docstrings = true

# Imports are removed from the similarity computation
ignore-imports = false

# Minimum lines number of a similarity.
min-similarity-lines = 4

[tool.pylint.spelling]

# Spelling dictionary name. Available dictionaries: none. To make it work,
# install the 'python-enchant' package.
# spelling-dict =

# List of comma separated words that should not be checked.
# spelling-ignore-words =

# A path to a file that contains the private dictionary; one word per line.
# spelling-private-dict-file =

# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
spelling-store-unknown-words = false

[tool.pylint.string]
# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency = true

[tool.pylint.typecheck]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators = [
  "contextlib.contextmanager",
  "contextlib2.contextmanager",
]

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
# generated-members =

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members = true


# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes = ["optparse.Values", "thread._local", "_thread._local"]

[tool.pylint.variables]
# List of additional names supposed to be defined in builtins. Remember that you
# should avoid defining new builtins when possible.
# additional-builtins =

# List of strings which can identify a callback function by name. A callback name
# must start or end with one of those strings.
callbacks = ["cb_", "_cb"]

# A regular expression matching the name of dummy variables (i.e. expected to not
# be used).
dummy-variables-rgx = "^\\*{0,2}(_$|unused_|dummy_)"

# Tells whether we should check for unused import in __init__ files.
init-import = false

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules = [
  "six",
  "six.moves",
  "past.builtins",
  "future.builtins",
  "functools",
]

[tool.isort]
profile = "black"
line_length = 80

[tool.black]
line-length = 80

[tool.pydocstyle]
convention = "google"
add-ignore = "D104,D301,D415"

[tool.mypy]
check_untyped_defs = true
show_column_numbers = true
warn_no_return = true
warn_redundant_casts = true
warn_unused_configs = true

# Strict mode:
# disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
# warn_return_any = true
warn_unreachable = true

exclude = ["build", "tests", "venv", "^aineko/templates/"]
plugins = ["pydantic.mypy"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true


[[tool.mypy.overrides]]
module = ["confluent_kafka", "confluent_kafka.*", "schema", "uvicorn"]
ignore_missing_imports = true

[tool.coverage.run]
omit = ["aineko/tests/*"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",
]
omit = ["tests/**", "**/__init__.py"]
show_missing = true
skip_empty = true
